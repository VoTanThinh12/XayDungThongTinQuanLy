const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const databaseService = require("../services/database");

class AuthController {
  constructor() {
    // ‚úÖ Kh·ªüi t·∫°o prisma trong constructor
    this.prisma = databaseService.getClient();

    // ‚úÖ Bind methods ƒë·ªÉ kh√¥ng m·∫•t context
    this.login = this.login.bind(this);
    this.getProfile = this.getProfile.bind(this);
    this.logout = this.logout.bind(this);
  }

  async login(req, res) {
    try {
      console.log("üîç DEBUG: this.prisma =", !!this.prisma); // Debug log

      const { tai_khoan, mat_khau } = req.body;

      // Validate input
      if (!tai_khoan || !mat_khau) {
        return res.status(400).json({
          success: false,
          message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß t√†i kho·∫£n v√† m·∫≠t kh·∫©u",
        });
      }

      // ‚úÖ Ki·ªÉm tra prisma tr∆∞·ªõc khi s·ª≠ d·ª•ng
      if (!this.prisma) {
        console.error("‚ùå Prisma client is undefined");
        return res.status(500).json({
          success: false,
          message: "L·ªói k·∫øt n·ªëi database",
        });
      }

      // T√¨m nh√¢n vi√™n
      const employee = await this.prisma.nhan_vien.findUnique({
        where: { tai_khoan },
      });

      if (!employee) {
        return res.status(401).json({
          success: false,
          message: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i",
        });
      }

      // Ki·ªÉm tra tr·∫°ng th√°i active
      if (!employee.trang_thai) {
        return res.status(401).json({
          success: false,
          message: "T√†i kho·∫£n ƒë√£ b·ªã kh√≥a",
        });
      }

      // Ch·ªâ cho ph√©p thu ng√¢n ƒëƒÉng nh·∫≠p
      if (employee.vai_tro !== "thu_ngan") {
        return res.status(403).json({
          success: false,
          message: "Ch·ªâ thu ng√¢n m·ªõi ƒë∆∞·ª£c truy c·∫≠p h·ªá th·ªëng POS",
        });
      }

      // Ki·ªÉm tra m·∫≠t kh·∫©u
      const isValidPassword = await bcrypt.compare(mat_khau, employee.mat_khau);
      if (!isValidPassword) {
        return res.status(401).json({
          success: false,
          message: "M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng",
        });
      }

      // T·∫°o JWT token
      const token = jwt.sign(
        {
          id: employee.id,
          tai_khoan: employee.tai_khoan,
          vai_tro: employee.vai_tro,
        },
        process.env.JWT_SECRET,
        { expiresIn: process.env.JWT_EXPIRE || "8h" }
      );

      // Response th√†nh c√¥ng
      res.status(200).json({
        success: true,
        message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
        data: {
          token,
          employee: {
            id: employee.id,
            ho_ten: employee.ho_ten,
            tai_khoan: employee.tai_khoan,
            vai_tro: employee.vai_tro,
            ca_lam_viec: employee.ca_lam_viec,
          },
        },
      });
    } catch (error) {
      console.error("‚ùå Login error:", error);
      res.status(500).json({
        success: false,
        message: `L·ªói ƒëƒÉng nh·∫≠p: ${error.message}`,
      });
    }
  }

  async getProfile(req, res) {
    try {
      if (!this.prisma) {
        return res.status(500).json({
          success: false,
          message: "L·ªói k·∫øt n·ªëi database",
        });
      }

      const employee = await this.prisma.nhan_vien.findUnique({
        where: { id: req.user.id },
        select: {
          id: true,
          ho_ten: true,
          tai_khoan: true,
          vai_tro: true,
          ca_lam_viec: true,
          so_dien_thoai: true,
          created_at: true,
        },
      });

      res.status(200).json({
        success: true,
        data: employee,
      });
    } catch (error) {
      res.status(500).json({
        success: false,
        message: `L·ªói l·∫•y th√¥ng tin: ${error.message}`,
      });
    }
  }

  async logout(req, res) {
    try {
      res.status(200).json({
        success: true,
        message: "ƒêƒÉng xu·∫•t th√†nh c√¥ng",
      });
    } catch (error) {
      res.status(500).json({
        success: false,
        message: `L·ªói ƒëƒÉng xu·∫•t: ${error.message}`,
      });
    }
  }
}

module.exports = new AuthController();
