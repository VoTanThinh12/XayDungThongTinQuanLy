// const jwt = require('jsonwebtoken');

// /**
//  * Middleware x√°c th·ª±c JWT
//  */
// function authenticateToken(req, res, next) {
//   const authHeader = req.headers.authorization;
//   const token = authHeader && authHeader.split(' ')[1];

//   if (!token) {
//     return res.status(401).json({ error: 'Kh√¥ng c√≥ token, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i' });
//   }

//   try {
//     const decoded = jwt.verify(token, process.env.JWT_SECRET);

//     // Chu·∫©n h√≥a vai_tro v·ªÅ ch·ªØ th∆∞·ªùng
//     if (decoded.vai_tro) {
//       decoded.vai_tro = decoded.vai_tro.toLowerCase();
//     }

//     req.user = decoded;
//     next();
//   } catch (error) {
//     console.error('JWT Verify Error:', error);

//     if (error.name === 'TokenExpiredError') {
//       return res.status(401).json({ error: 'Token ƒë√£ h·∫øt h·∫°n, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i' });
//     }
//     if (error.name === 'JsonWebTokenError') {
//       return res.status(401).json({ error: 'Token kh√¥ng h·ª£p l·ªá' });
//     }

//     return res.status(401).json({ error: 'L·ªói x√°c th·ª±c token' });
//   }
// }

// /**
//  * Middleware ki·ªÉm tra quy·ªÅn
//  * @param {string|string[]} roles - Vai tr√≤ ho·∫∑c m·∫£ng vai tr√≤ ƒë∆∞·ª£c ph√©p
//  */
// function checkRole(roles) {
//   const allowedRoles = Array.isArray(roles)
//     ? roles.map(r => r.toLowerCase())
//     : [roles.toLowerCase()];

//   return (req, res, next) => {
//     if (!req.user) {
//       return res.status(401).json({ error: 'Ch∆∞a x√°c th·ª±c' });
//     }
//     if (!req.user.vai_tro) {
//       return res.status(403).json({ error: 'T√†i kho·∫£n kh√¥ng c√≥ th√¥ng tin vai tr√≤' });
//     }
//     if (!allowedRoles.includes(req.user.vai_tro)) {
//       console.warn(`Quy·ªÅn b·ªã t·ª´ ch·ªëi: y√™u c·∫ßu [${allowedRoles.join(', ')}], nh∆∞ng user c√≥ '${req.user.vai_tro}'`);
//       return res.status(403).json({ error: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' });
//     }
//     next();
//   };
// }

// module.exports = { authenticateToken, checkRole };
const jwt = require("jsonwebtoken");

/**
 * Middleware x√°c th·ª±c JWT
 */
function authenticateToken(req, res, next) {
  const authHeader = req.headers.authorization;
  const token = authHeader && authHeader.split(" ")[1];
  const tokenFromQuery = req.query.token; // üëà h·ªó tr·ª£ token qua query (ƒë·ªÉ m·ªü tab in)

  if (!token) {
    return res
      .status(401)
      .json({ error: "Kh√¥ng c√≥ token, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i" });
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);

    // Chu·∫©n h√≥a vai_tro v·ªÅ ch·ªØ th∆∞·ªùng
    if (decoded.vai_tro) {
      decoded.vai_tro = decoded.vai_tro.toLowerCase();
    }

    req.user = decoded;
    next();
  } catch (error) {
    console.error("JWT Verify Error:", error);

    if (error.name === "TokenExpiredError") {
      return res
        .status(401)
        .json({ error: "Token ƒë√£ h·∫øt h·∫°n, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i" });
    }
    if (error.name === "JsonWebTokenError") {
      return res.status(401).json({ error: "Token kh√¥ng h·ª£p l·ªá" });
    }

    return res.status(401).json({ error: "L·ªói x√°c th·ª±c token" });
  }
}

/**
 * Middleware ki·ªÉm tra quy·ªÅn
 * @param {string|string[]} roles - Vai tr√≤ ho·∫∑c m·∫£ng vai tr√≤ ƒë∆∞·ª£c ph√©p
 */
function checkRole(roles) {
  const allowedRoles = Array.isArray(roles)
    ? roles.map((r) => r.toLowerCase())
    : [roles.toLowerCase()];

  return (req, res, next) => {
    if (!req.user) {
      return res.status(401).json({ error: "Ch∆∞a x√°c th·ª±c" });
    }
    if (!req.user.vai_tro) {
      return res
        .status(403)
        .json({ error: "T√†i kho·∫£n kh√¥ng c√≥ th√¥ng tin vai tr√≤" });
    }
    if (!allowedRoles.includes(req.user.vai_tro)) {
      console.warn(
        `Quy·ªÅn b·ªã t·ª´ ch·ªëi: y√™u c·∫ßu [${allowedRoles.join(
          ", "
        )}], nh∆∞ng user c√≥ '${req.user.vai_tro}'`
      );
      return res.status(403).json({ error: "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p" });
    }
    next();
  };
}

module.exports = { authenticateToken, checkRole };
